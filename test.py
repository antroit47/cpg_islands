import pytest
from Bio import SeqIO, SeqRecord, Seq
from islands import Window, find_islands, get_sequence_from_ncbi


def windows_equal(win1: Window, win2: Window) -> bool:
    return (
        win1.window_begin == win2.window_begin
        and win1.window_end == win2.window_end
        and win1.window_size == win2.window_size
        and win1.gc_count == win2.gc_count
        and win1.obs_cpg == win2.obs_cpg
        and win1.gc_perc == win2.gc_perc
        and win1.obs_exp == win2.obs_exp
    )


def test_monkeypox_online_record():
    record = get_sequence_from_ncbi("DQ011153.1")
    islands = find_islands(record)
    assert len(islands) == 1
    correct_island = Window(record, 189862, 211)
    assert windows_equal(islands[0], correct_island)


@pytest.mark.parametrize(
    "record",
    [
        "GTGTCTAGAAAAAAATGTGTGACCCACGACTGTAGGAAACTCTAGAGGGTAAGAAAAATCAATCGTTTATAGAGACCATCAGAAAGAGGTTTAATATTTTTGTGAGACCCATCGAAGAGAGAAAGGATAAAAACTTTTTACGACTCCATCAGAAAGAGGTTTAATATTTTTGTGAGACCCATCGAAGAGAGAAAGGATAAAAACTTTTTACGACTCCATCAGAAAGAGGTTTAATATTTTTGTGAGACCCATCGAAGAGAGAAAGGATAAAAACTTTTTACGACTCCATCAGAAAGAGGTTTAATATTTTTGTGAGACCCATCGAAGAGAGAAAGAGATGGTTAGTCAAGATATTTTTCTTAGTACAAAAGTCAATGTTTTAAAATATATGGACGAGAATTAATTTGTCTGTATAAAAACTTGTGTGAAATTATGTACTAGAGAAAAAACGTGAGTAGTGTCCCCTACATGGATTTTACAGATCATTTATATTCCAAAAATATTAACTATATACGTTTATTATATGATGTTAACGTGTAAATTATAAACATTATTTTATGATGCAATTGTCTGACAACCTAGATTGGTATAAGGATGTTGATAAGCTCTACGAGAATATATTGTTGGACGTTATCGTTTACGAAATAGTTGAGACATCAGAAAGAGGTTTAATATTTTTGTGAGACCATCGAAGAGAGAAATAGAATAAAAATATTTTTTTTTTGTAAAACTTTTTTATGAGACCAAGAGAATACGAATAGTGATCATATCGTATCACATATTGAAACAGAAAGAAGAAGTAACGAGAGGTAACTTTTTGTGAATGTAGTTAAATATTTTTGTTTTGCAAACCGGAATATAGTGCCCGGTCTTTTTTAATTCGTGGTGCGGTGTCTGAATCGTTCGATTAACCCAACTCATCCATTTTCAGATGAATAGAGTTATCGATTCAGACACATGCTTTGAGTTTTGTTGAATCGATGAGTGAAGTATCATCGGTTGCACCTTCAGATGCCGATCCGTCGACATACTTGAATCCATCCTTGACTTCAAGTTCAGATGATTCCTCACACATGTCTCCGATACGTACGCTAAACTCTAGGTTCTTGACACATTTTGTATCAACGATCGTTGAACCGATGATATCTTTGTAACTCACTTTCTTATGTGAGATGTTAGACCCAAGTACTGGATGGGTCTTGATGTCACTGTCTTTCTCTTCTTCGCTACATCTGATGTCGATAGACATCTCACAGTCTTTGATCATAGCCAGAGCTTCTTCACGCGTGATCGCGGGAGAGTCCTTACCTTGTCCCGGTGACACGCTGGACAATCTAGTATTCACAGTGTTTCCATCAGAGGATTCGGAGATGGATGAAATCTTTGGGCATTTGGTGAATCCAAAGTTCATGTTAAGACCCGCACCGACGATAGTGTAATAAGTGGTGGGATCTCCTTTTACAACTTCTTCGGATACCTCATCATCTTCGGTCTCTGTAACTTCCGTTACGGATTGACAAATCTTATCATTGGTCGGTGTTTGGTCTTGCTTTGTGACTTTGATAATAACATCGATTCCCATATGATGTTTGTTTTCTTCTTCAGTACACGAGGATGAAGATTGTTGAAGACTAGTAGGCATAGCAGCTGCCACTAGGCACATGCATGCCAGGACAATATATTGTTTCATGATTGCTATTGATTGATTACTGTTCTAGATGATTCTACTTTCTTACCATATAATAAATTAGAATATATTTTCTACTTTTACGAGAAATTAATTATTGTATTTATTATTTATGGGTAAAAAAACTTACTATAAGTGGGTGGGATTCTGGGAATTAGTGATCAGTTTATGTATATCGCAACTAGCGGGCATATGGCTATTGACATCGAGAACATTACCCATATGATAAGAGATTGTATCCGTTTCGTAGTCTTGAGTATTGGTATTACTATATAGTATGTAGATGTCGACGCTAGATAGACAGTCGCCCACTAGAGTTACCGTCTCTGAATGCGGCATGATAGTATCATTCTTTGTTTTCGTTAACTGTTTGGAAGATGAATCTTTGTTGTTACATTTAATCTCGAAATTCAGAGTACATATCTTTGAAGTATTCTGATATCTATTTTCTCCTGTAAAGAATCCTGAAGTTGCTACATTATTAAGGACAGAGAAGTATTCTGCACGAAAGACTGGATCACAATCTTTATGATTCATGGTAATAGTTAGTTCCGACGTTGAGATGGATTCGCTGAGACCGGTAGTGGTCGTCCGAGTACACGATGTGTCGTTGACTGGATACAGGTTAATTTCCACATCGATATAGTTAAATGTATTGCTGGTTACGACGGGTTCGCATTTATCTGTGGAAGAGACGGTGTGAGAATATGTTCCGGGACCACACGGAGAACAGATGACGTCTCCGGTAGACGTGTATCCGGATACTCCGTATCCTATTCCACACTTTGTTTTAGAAATACATGTTCTACACCCTGATGCTCCTTTGAGAAGACAATAATATCCTGGAGAGCATTCACAGATTCTATTGTGAGTCGTGTTACACGATCGCGTCTCTACCTGATTACTATCACATCTTCCGTTACAACTTAGACAAGCCTGTAAATGATTATTGTGAGATGTAAAGGTATCCGAACCACACGGTGTACATTGTGTATTAGTCTTGCTATCACATAATCTGGAAGCGTAAGTTCCCGGAGGACACGATAGACAACATAGATTACGGCTTCTGTATTCGTTGTCTTTACACTTTCCATTGGATGGTGCATGTGGTGCTATATCTCTTCCGTTTATTATTATACATGAGAGAAACAATATATACGAGTATAATACGGACCTCATGATTTAATAATGTAGTAATCGTCGTCTTGTTACTGTTTGTTTCCTACTTCTCCAATCATATAGATTATTTTTTAAATATTTTCTTTCTATCATGGATAATATTTGTAATGGTTCTTTCCGTACAACATACTGTT",
        "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        "AAAAAAAAAA",
        "A",
        "",
        "GCGCG",
        "GCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGC",
        "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG",
    ],
)
def test_no_island_record(record):
    islands = find_islands(record)
    assert len(islands) == 0


@pytest.mark.parametrize(
    "record,begin,size",
    [
        (
            "GCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCG",
            0,
            200,
        ),
        (
            "GCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCG",
            0,
            210,
        ),
        (

            0,
            1000,
        ),
    ],
)
def test_island_at_0_record(record, begin, size):
    islands = find_islands(record)
    assert len(islands) == 1
    correct_island = Window(record, begin, size)
    assert windows_equal(islands[0], correct_island)